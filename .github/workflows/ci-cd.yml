name: CI/CD Pipeline

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master]

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.13'

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    name: Backend Tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: 'latest'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('backend/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install dependencies
        working-directory: ./backend
        run: uv sync --dev

      - name: Run backend tests
        working-directory: ./backend
        run: uv run pytest -v --cov=. --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

  frontend-tests:
    runs-on: ubuntu-latest
    name: Frontend Tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('frontend/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        working-directory: ./frontend
        run: bun install --frozen-lockfile

      - name: Run type checking
        working-directory: ./frontend
        run: bun run type-check

      - name: Run linting
        working-directory: ./frontend
        run: bun run lint

      - name: Run unit tests
        working-directory: ./frontend
        run: bun test --coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./frontend/coverage/coverage-final.json
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false

  e2e-tests:
    runs-on: ubuntu-latest
    name: E2E Tests

    services:
      backend:
        image: python:3.13-slim
        options: --health-cmd="curl -f http://localhost:8000/health || exit 1" --health-interval=30s --health-timeout=10s --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: 'latest'

      - name: Install backend dependencies
        working-directory: ./backend
        run: uv sync

      - name: Start backend server
        working-directory: ./backend
        run: |
          uv run python main.py &
          sleep 10
        env:
          ENVIRONMENT: test

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: bun install --frozen-lockfile

      - name: Install Playwright browsers
        working-directory: ./frontend
        run: bunx playwright install --with-deps

      - name: Run Playwright tests
        working-directory: ./frontend
        run: bunx playwright test
        env:
          CI: true

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 30

  build-and-deploy:
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    needs: [backend-tests, frontend-tests, e2e-tests]
    runs-on: ubuntu-latest
    name: Build and Deploy to AWS

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push backend image
        working-directory: ./backend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: stori-backend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          
          # Push to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Build, tag, and push frontend image
        working-directory: ./frontend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: stori-frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          
          # Push to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Deploy to ECS
        env:
          AWS_REGION: ${{ vars.AWS_REGION || 'us-east-1' }}
        run: |
          # Update backend service
          aws ecs update-service \
            --cluster stori-cluster \
            --service stori-backend-service \
            --force-new-deployment \
            --region $AWS_REGION

          # Update frontend service  
          aws ecs update-service \
            --cluster stori-cluster \
            --service stori-frontend-service \
            --force-new-deployment \
            --region $AWS_REGION

      - name: Wait for deployment to complete
        env:
          AWS_REGION: ${{ vars.AWS_REGION || 'us-east-1' }}
        run: |
          echo "Waiting for backend deployment..."
          aws ecs wait services-stable \
            --cluster stori-cluster \
            --services stori-backend-service \
            --region $AWS_REGION

          echo "Waiting for frontend deployment..."
          aws ecs wait services-stable \
            --cluster stori-cluster \
            --services stori-frontend-service \
            --region $AWS_REGION

          echo "âœ… Deployment completed successfully!"

      - name: Get application URL
        env:
          AWS_REGION: ${{ vars.AWS_REGION || 'us-east-1' }}
        run: |
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --names stori-alb \
            --query 'LoadBalancers[0].DNSName' \
            --output text \
            --region $AWS_REGION)
          
          echo "ðŸš€ Application deployed successfully!"
          echo "ðŸ“± Frontend URL: http://$ALB_DNS"
          echo "ðŸ”§ API URL: http://$ALB_DNS/api"
          echo "ðŸ“š API Docs: http://$ALB_DNS/docs"

  # Infrastructure deployment job (run separately when needed)
  deploy-infrastructure:
    if: github.ref == 'refs/heads/master' && contains(github.event.head_commit.message, '[deploy-infra]')
    runs-on: ubuntu-latest
    name: Deploy AWS Infrastructure

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.0"

      - name: Terraform Init
        working-directory: ./infrastructure
        run: terraform init

      - name: Terraform Plan
        working-directory: ./infrastructure
        env:
          TF_VAR_supabase_url: ${{ secrets.SUPABASE_URL }}
          TF_VAR_supabase_anon_key: ${{ secrets.SUPABASE_ANON_KEY }}
          TF_VAR_supabase_service_key: ${{ secrets.SUPABASE_SERVICE_KEY }}
          TF_VAR_openrouter_api_key: ${{ secrets.OPENROUTER_API_KEY }}
          TF_VAR_aws_region: ${{ vars.AWS_REGION || 'us-east-1' }}
        run: terraform plan

      - name: Terraform Apply
        working-directory: ./infrastructure
        env:
          TF_VAR_supabase_url: ${{ secrets.SUPABASE_URL }}
          TF_VAR_supabase_anon_key: ${{ secrets.SUPABASE_ANON_KEY }}
          TF_VAR_supabase_service_key: ${{ secrets.SUPABASE_SERVICE_KEY }}
          TF_VAR_openrouter_api_key: ${{ secrets.OPENROUTER_API_KEY }}
          TF_VAR_aws_region: ${{ vars.AWS_REGION || 'us-east-1' }}
        run: terraform apply -auto-approve

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
