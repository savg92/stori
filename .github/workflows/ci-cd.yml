name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.13'

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    name: Backend Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        
    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('backend/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-
          
    - name: Install dependencies
      working-directory: ./backend
      run: uv sync --dev
      
    - name: Run backend tests
      working-directory: ./backend
      run: uv run pytest -v --cov=. --cov-report=xml
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

  frontend-tests:
    runs-on: ubuntu-latest
    name: Frontend Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.bun/install/cache
        key: ${{ runner.os }}-bun-${{ hashFiles('frontend/bun.lockb') }}
        restore-keys: |
          ${{ runner.os }}-bun-
          
    - name: Install dependencies
      working-directory: ./frontend
      run: bun install --frozen-lockfile
      
    - name: Run type checking
      working-directory: ./frontend
      run: bun run type-check
      
    - name: Run linting
      working-directory: ./frontend
      run: bun run lint
      
    - name: Run unit tests
      working-directory: ./frontend
      run: bun test --coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./frontend/coverage/coverage-final.json
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false

  e2e-tests:
    runs-on: ubuntu-latest
    name: E2E Tests
    
    services:
      backend:
        image: python:3.13-slim
        options: --health-cmd="curl -f http://localhost:8000/health || exit 1" --health-interval=30s --health-timeout=10s --health-retries=5
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        
    - name: Install backend dependencies
      working-directory: ./backend
      run: uv sync
      
    - name: Start backend server
      working-directory: ./backend
      run: |
        uv run python main.py &
        sleep 10
      env:
        ENVIRONMENT: test
        
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: bun install --frozen-lockfile
      
    - name: Install Playwright browsers
      working-directory: ./frontend
      run: bunx playwright install --with-deps
      
    - name: Run Playwright tests
      working-directory: ./frontend
      run: bunx playwright test
      env:
        CI: true
        
    - name: Upload Playwright report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: frontend/playwright-report/
        retention-days: 30

  build-and-deploy:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [backend-tests, frontend-tests, e2e-tests]
    runs-on: ubuntu-latest
    name: Build and Deploy
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        
    - name: Build frontend
      working-directory: ./frontend
      run: |
        bun install --frozen-lockfile
        bun run build
        
    - name: Build backend Docker image
      working-directory: ./backend
      run: |
        docker build -t stori-backend:${{ github.sha }} .
        
    - name: Build frontend Docker image
      working-directory: ./frontend
      run: |
        docker build -t stori-frontend:${{ github.sha }} .
        
    # Add deployment steps here based on your infrastructure
    # Example: Deploy to staging/production environment
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          frontend/dist/
          backend/Dockerfile
        retention-days: 7

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'