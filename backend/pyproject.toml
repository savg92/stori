[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "stori-expense-tracker-backend"
version = "1.0.0"
description = "Stori Expense Tracker Backend - FastAPI with AI financial advisor powered by LangChain and OpenAI"
readme = "./README.md"
license = { text = "MIT" }
authors = [
    { name = "savg92", email = "1992savg@gmail.com" }
]
keywords = ["expense-tracker", "fintech", "ai", "langchain", "fastapi", "supabase", "financial-advisor"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Web Environment",
    "Framework :: FastAPI",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Office/Business :: Financial",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
]
requires-python = ">=3.10"
dependencies = [
    # Core FastAPI and server dependencies
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.34.0",
    "python-dotenv>=1.1.0",
    "pydantic>=2.11.0",
    "pydantic-settings>=2.8.0",
    # Supabase integration
    "supabase>=2.19.0",
    "postgrest>=0.18.0",
    "gotrue>=2.11.0",
    # LangChain for AI financial advisor
    "langchain>=0.3.0",
    "langchain-openai>=0.3.0",
    "langchain-core>=0.3.0",
    "langchain-community>=0.3.0",
    "langchain-ollama>=0.2.0",
    "openai>=1.75.0",
    # HTTP and networking
    "httpx>=0.28.0",
    "requests>=2.32.0",
    # Data processing and utilities
    "python-dateutil>=2.9.0",
    "pyyaml>=6.0.0",
    # Authentication and security
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.0",
    "bcrypt>=4.3.0",
    # Core Python utilities
    "typing-extensions>=4.13.0",
    "email-validator>=2.3.0",
    "pytest>=8.4.2",
    "pytest-asyncio>=1.2.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

# Testing dependencies
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "httpx>=0.24.0",
    "respx>=0.20.0",
]

# Documentation dependencies
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.22.0",
]

# Production dependencies
prod = [
    "gunicorn>=21.0.0",
]

[project.urls]
"Homepage" = "https://github.com/savg92/stori-expense-tracker"
"Bug Reports" = "https://github.com/savg92/stori-expense-tracker/issues"
"Source" = "https://github.com/savg92/stori-expense-tracker"
"Documentation" = "https://github.com/savg92/stori-expense-tracker#readme"

[project.scripts]
# CLI entry points
stori-server = "main:app"

[tool.hatch.build]
# Include the source code and config files
include = [
    "*.py",
    "src/**/*.py",
    "config/**/*.py", 
    "README.md",
    "LICENSE*",
]

[tool.hatch.build.targets.wheel]
packages = ["src"]

# Development tools configuration
[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
    | \.venv
    | \.env
    | __pycache__
    | build
    | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
exclude = [
    "__pycache__/",
    ".venv/",
]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-v --tb=short --strict-markers --disable-warnings"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
